---
import {
  isSupportedLang,
  LANGUAGES,
  getLocalizedPage,
  useTranslation,
  type Language,
  type PageName,
} from "@/utils/i18n";
import { slugToCanonical } from "@/utils/content";
import Layout from "@/layouts/WithHeader.astro";
import ContactForm from "@/components/forms/ContactForm";
import FullWidthBlock from "@/components/content/FullWidthBlock.astro";

interface Props {
  frontmatter: AboutFrontmatter;
}

interface AboutFrontmatter {
  lang: Language;
  title: string;
  description: string;
}

const PAGE = "contact" satisfies PageName;

const { frontmatter } = Astro.props;
const { lang } = frontmatter;

if (!isSupportedLang(lang)) {
  return Astro.redirect(`/404?from=${Astro.url.pathname}`);
}

const { origin } = Astro.url;
const translations = LANGUAGES.filter(l => l !== lang).map(language => ({
  lang: language,
  slug: slugToCanonical(getLocalizedPage(language, PAGE), origin),
}));

const canonical = slugToCanonical(getLocalizedPage(lang, PAGE), origin);
const t = await useTranslation(lang);

const copyText = {
  form: {
    defaultReason: t("forms", "reason.default"),
    disclaimer: t("forms", "disclaimer"),
    email: t("forms", "email"),
    error: t("forms", "contact.error"),
    message: t("forms", "message"),
    messagePlaceholder: t("forms", "message.placeholder"),
    name: t("forms", "name"),
    reason: t("forms", "reason"),
    reasonOptions: {
      hello: t("forms", "reason.hello"),
      help: t("forms", "reason.help"),
      other: t("forms", "reason.other"),
      question: t("forms", "reason.question"),
      work: t("forms", "reason.work"),
    },
    submit: t("forms", "submit"),
    submitting: t("forms", "submitting"),
    success: t("forms", "contact.success"),
  },
};
---

<Layout
  lang={lang}
  canonical={canonical}
  description={t("page_descriptions", PAGE)}
  title={t("navigation", PAGE)}
  translations={translations}
>
  <main
    class="bg-gradient-to-b dark:gradient-gray-slate lg:gradient-blue-transparent dark:bg-gradient-to-t lg:bg-gradient-to-r dark:lg:bg-gradient-to-t"
  >
    <div class="container mx-auto h-full min-h-screen">
      <div class="size-full min-h-screen">
        <div class="h-full min-h-screen items-center gap-4 lg:grid lg:grid-cols-2">
          <div class="hidden px-6 py-4 sm:px-8 lg:bg-transparent lg:py-12 xl:p-32 xl:pt-0"></div>
          <FullWidthBlock
            withContainer
            containerClass="h-full"
            class="h-full items-center bg-blue-200 dark:bg-transparent lg:bg-transparent"
            resetAt="lg"
          >
            <div class="prose grid h-full items-center dark:prose-invert xl:prose-lg">
              <div>
                <h1 class="text-5xl text-blue-800 dark:text-blue-100">{frontmatter.title}</h1>
                <p class="m-0 text-xl text-slate-600 dark:text-slate-400">{frontmatter.description}</p>
                <slot />
              </div>
            </div>
          </FullWidthBlock>
          <div class="px-6 py-4 sm:px-8 lg:mt-20 lg:py-12 xl:mt-0 xl:px-24">
            <ContactForm client:idle action="/api/contact" localeString={copyText.form} lang={lang} />
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>
