---
import { path, split, pipe, filter } from "rambda";
import Layout from "@/layouts/WithMiniHeader.astro";
import { DEFAULT_LOCALE, getLocalizedPage, isSupportedLang, useTranslation } from "@/utils/i18n";
import { getBlogEntriesByLang, getEntryURL, slugToCanonical, type BlogEntry } from "@/utils/content";

const search = new URLSearchParams(Astro.url.search).get("from") ?? "";
const localeFromSearch = pipe(split("/"), filter(Boolean), path("0"))(search) as string;
const lang = isSupportedLang(localeFromSearch) ? localeFromSearch : DEFAULT_LOCALE;

const allPosts = await getBlogEntriesByLang(lang);

// The lucky post is a random post from the same language as the current page.
// It could be that there are no posts in the current language, so we need to
// force TypeScript to accept undefined as a possible value.
const luckyPost = allPosts[Math.floor(Math.random() * allPosts.length)] as BlogEntry | undefined;

const homeURL = getLocalizedPage(lang, "home");
const luckyURL = luckyPost ? getEntryURL("blog", luckyPost.entry.slug) : getLocalizedPage(lang, "blog");

const t = useTranslation(lang);
const canonical = slugToCanonical("/404");
---

<Layout
  translations={[]}
  fullHeight
  canonical={canonical}
  lang={lang}
  description={t("page_descriptions", "not_found")}
  title={t("messages", "page_not_found")}
  class="h-full flex flex-col dark:!bg-slate-900"
>
  <main class="grid flex-1 place-items-center px-6 py-24 lg:px-8 sm:py-32">
    <div class="text-center">
      <p class="text-xl text-blue-500 sm:text-4xl dark:text-blue-200">404</p>
      <h1 class="mb-10 text-4xl font-bold sm:mb-12 sm:text-6xl">{t("page_descriptions", "not_found")}</h1>
      <p class="mb-24 sm:mb-20">{t("messages", "page_not_found_message")}</p>
      <div class="space-x-8">
        <a
          href={homeURL}
          class="inline-block rounded-md bg-blue-50 px-6 py-3 font-semibold shadow-sm transition-colors active:bg-blue-100 dark:bg-slate-800 hover:bg-blue-100/50 dark:active:bg-slate-800/70 dark:hover:bg-slate-800/90"
          >{t("navigation", "go_home")}</a
        >

        <a href={luckyURL} class="inline-block font-semibold text-blue-800 dark:text-blue-50"
          >{t("navigation", "feeling_lucky")}</a
        >
      </div>
    </div>
  </main>
</Layout>
